{"version":3,"file":"Mountains-dbg.controller.js","names":["RANGE_COLUMN_KEY","MountainsController","Controller","extend","onInit","_onInit","engine","Engine","getInstance","initGridFilter","_initGridFilter","gridList","byId","filterModel","getModel","gridListItems","getItems","filterMetadata","map","gridListItem","index","path","key","getId","label","getData","filters","filterHelper","MetadataHelper","register","helper","controller","Items","SelectionController","control","targetAggregation","getKeyForItem","listBinding","getBinding","getFilters","some","filter","expression","getBindingContext","getProperty","getPath","getValue1","attachStateChange","onP13nStateChange","bind","_onP13nStateChange","event","parameters","getParameters","state","forEach","setSelected","selectionState","filterText","item","Element","getElementById","filterContext","description","push","Filter","table","tableBinding","setFilterInfoText","onGridFilterPress","_onGridFilterPress","show","title","source","getSource","onGridFilterSelect","_onGridFilterSelect","listItem","retrieveState","then","itemId","oStateItem","find","getSelected","visible","applyState","onP13nPress","_onP13nPress","p13nTable","openP13n","onToggleRange","_onToggleRange","pressed","getPressed","rangeColumnState","Columns","MessageToast"],"sources":["Mountains.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\"\nimport Event from \"sap/ui/base/Event\"\nimport P13nTable, { P13nTableState } from \"../control/P13nTable\"\nimport ToggleButton from \"sap/m/ToggleButton\"\nimport MessageToast from \"sap/m/MessageToast\"\nimport Engine, { State } from \"sap/m/p13n/Engine\"\nimport GridList from \"sap/f/GridList\"\nimport MetadataHelper, { MetadataObject } from \"sap/m/p13n/MetadataHelper\"\nimport SelectionController, { SelectionState } from \"sap/m/p13n/SelectionController\"\nimport GridListItem from \"sap/f/GridListItem\"\nimport JSONModel from \"sap/ui/model/json/JSONModel\"\nimport Control from \"sap/ui/core/Control\"\nimport Element from \"sap/ui/core/Element\"\nimport Filter from \"sap/ui/model/Filter\"\nimport ListBinding from \"sap/ui/model/ListBinding\"\nimport ListItemBase from \"sap/m/ListItemBase\"\n\nconst RANGE_COLUMN_KEY = 'container-sample.p13n.app---Mountains--range'\n\n/**\n * @namespace sample.p13n.app.controller\n */\nexport default class MountainsController extends Controller {\n\n\tprivate engine: Engine\n\n\tpublic onInit(): void {\n\t\tthis.engine = Engine.getInstance()\n\t\tthis.initGridFilter()\n\t}\n\n\tprivate initGridFilter(): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tconst filterModel = gridList.getModel(\"filters\") as JSONModel\n\t\tconst gridListItems: GridListItem[] = gridList.getItems() as GridListItem[]\n\n\t\tconst filterMetadata: MetadataObject[] = gridListItems.map((gridListItem: GridListItem, index: number) => {\n\t\t\treturn {\n\t\t\t\tpath: \"\",\n\t\t\t\tkey: gridListItem.getId(),\n\t\t\t\tlabel: filterModel.getData().filters[index].label,\n\t\t\t}\n\t\t})\n\n\t\tconst filterHelper = new MetadataHelper(filterMetadata)\n\n\t\tthis.engine.register(gridList, {\n\t\t\thelper: filterHelper,\n\t\t\tcontroller: {\n\t\t\t\tItems: new SelectionController({\n\t\t\t\t\tcontrol: gridList,\n\t\t\t\t\ttargetAggregation: \"items\",\n\t\t\t\t\tgetKeyForItem: (gridListItem: GridListItem) => {\n\t\t\t\t\t\tconst listBinding = this.byId(\"table\").getBinding(\"items\") as ListBinding\n\t\t\t\t\t\treturn listBinding.getFilters(\"Control\").some((filter: Filter) => {\n\t\t\t\t\t\t\tconst expression: string[] = gridListItem.getBindingContext(\"filters\").getProperty(\"expression\")\n\t\t\t\t\t\t\treturn filter.getPath() === expression[0]\n\t\t\t\t\t\t\t\t&& filter.getValue1() === expression[2]\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tthis.engine.attachStateChange(this.onP13nStateChange.bind(this))\n\t}\n\n\tprivate onP13nStateChange(event: Event): void {\n\t\tconst parameters = event.getParameters() as {\n\t\t\tcontrol: Control,\n\t\t\tstate: MountainsControllerState\n\t\t}\n\t\tconst state: MountainsControllerState = parameters.state\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\n\t\tif (parameters.control === gridList) {\n\t\t\tgridList.getItems().forEach((gridListItem: GridListItem) => {\n\t\t\t\tgridListItem.setSelected(state.Items.some((selectionState: SelectionState) => {\n\t\t\t\t\treturn gridListItem.getId() === selectionState.key\n\t\t\t\t}))\n\t\t\t})\n\n\t\t\tconst filters: Filter[] = []\n\t\t\tlet filterText: string\n\t\t\tstate.Items.forEach((selectionState: SelectionState) => {\n\t\t\t\tconst item: GridListItem | undefined = Element.getElementById(selectionState.key) as GridListItem | undefined\n\t\t\t\tif (item) {\n\t\t\t\t\tconst filterContext = item.getBindingContext(\"filters\")\n\t\t\t\t\tconst expression: any[] = filterContext.getProperty(\"expression\")\n\t\t\t\t\tconst description: string = filterContext.getProperty(\"description\")\n\t\t\t\t\tfilters.push(new Filter(expression[0], expression[1], expression[2]))\n\t\t\t\t\tfilterText = filterText ? filterText + \", \" + description : description\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst table: P13nTable = this.byId(\"table\") as P13nTable\n\t\t\tconst tableBinding = table.getBinding(\"items\") as ListBinding\n\t\t\ttableBinding.filter(filters)\n\t\t\ttable.setFilterInfoText(filterText)\n\t\t}\n\t}\n\n\tpublic onGridFilterPress(event: Event): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tthis.engine.show(gridList, [\"Items\"], {\n\t\t\ttitle: \"Filter Selection\",\n\t\t\tsource: event.getSource()\n\t\t})\n\t}\n\n\tpublic onGridFilterSelect(event: Event): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tconst parameters = event.getParameters() as {\n\t\t\tlistItem : ListItemBase,\n\t\t\tlistItems : ListItemBase[],\n\t\t\tselected : boolean,\n\t\t\tselectAll: boolean\n\t\t}\n\t\tconst item = parameters.listItem as GridListItem\n\t\tthis.engine.retrieveState(gridList).then((state: MountainsControllerState) => {\n\t\t\tconst itemId = item.getId()\n\n\t\t\tconst oStateItem = state.Items.find((selectionState: SelectionState) => {\n\t\t\t\treturn selectionState.key == itemId\n\t\t\t})\n\n\t\t\tif (item.getSelected()) {\n\t\t\t\tstate.Items.push({key: itemId})\n\t\t\t} else {\n\t\t\t\toStateItem.visible = false\n\t\t\t}\n\n\t\t\tthis.engine.applyState(gridList, state)\n\t\t})\n\t}\n\n\tpublic onP13nPress(event: Event): void {\n\t\tconst p13nTable: P13nTable = this.byId(\"table\") as P13nTable\n\t\tp13nTable.openP13n(event)\n\t}\n\n\tpublic async onToggleRange(event: Event): Promise<void> {\n\t\tconst p13nTable: P13nTable = this.byId(\"table\") as P13nTable\n\t\tconst pressed = event.getSource<ToggleButton>().getPressed()\n\t\tconst state: P13nTableState = await p13nTable.retrieveState() as P13nTableState\n\t\tconst rangeColumnState = state.Columns.find((selectionState: SelectionState) => {\n\t\t\treturn selectionState.key == RANGE_COLUMN_KEY\n\t\t})\n\t\tif (pressed && rangeColumnState) {\n\t\t\trangeColumnState.visible = false\n\t\t\tMessageToast.show(\"Range hidden\")\n\t\t} else {\n\t\t\tstate.Columns.push({ key: RANGE_COLUMN_KEY, index: 0 })\n\t\t\tMessageToast.show(\"Range shown\")\n\t\t}\n\t\tp13nTable.applyState(state)\n\t}\n}\n\ninterface MountainsControllerState extends State {\n\tItems: SelectionState[]\n}"],"mappings":"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","ignoreList":[]}