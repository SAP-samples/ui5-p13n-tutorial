{"version":3,"file":"Mountains.controller.js","names":["RANGE_COLUMN_KEY","MountainsController","Controller","extend","onInit","_onInit","this","engine","Engine","getInstance","initGridFilter","_initGridFilter","gridList","byId","filterModel","getModel","gridListItems","getItems","filterMetadata","map","gridListItem","index","path","key","getId","label","getData","filters","filterHelper","MetadataHelper","register","helper","controller","Items","SelectionController","control","targetAggregation","getKeyForItem","listBinding","getBinding","getFilters","some","filter","expression","getBindingContext","getProperty","getPath","getValue1","attachStateChange","onP13nStateChange","bind","_onP13nStateChange","event","parameters","getParameters","state","forEach","setSelected","selectionState","filterText","item","Element","getElementById","filterContext","description","push","Filter","table","tableBinding","setFilterInfoText","onGridFilterPress","_onGridFilterPress","show","title","source","getSource","onGridFilterSelect","_onGridFilterSelect","listItem","retrieveState","then","itemId","oStateItem","find","getSelected","visible","applyState","onP13nPress","_onP13nPress","p13nTable","openP13n","onToggleRange","async","_onToggleRange","pressed","getPressed","rangeColumnState","Columns","MessageToast"],"sources":["Mountains.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\"\nimport Event from \"sap/ui/base/Event\"\nimport P13nTable, { P13nTableState } from \"../control/P13nTable\"\nimport ToggleButton from \"sap/m/ToggleButton\"\nimport MessageToast from \"sap/m/MessageToast\"\nimport Engine, { State } from \"sap/m/p13n/Engine\"\nimport GridList from \"sap/f/GridList\"\nimport MetadataHelper, { MetadataObject } from \"sap/m/p13n/MetadataHelper\"\nimport SelectionController, { SelectionState } from \"sap/m/p13n/SelectionController\"\nimport GridListItem from \"sap/f/GridListItem\"\nimport JSONModel from \"sap/ui/model/json/JSONModel\"\nimport Control from \"sap/ui/core/Control\"\nimport Element from \"sap/ui/core/Element\"\nimport Filter from \"sap/ui/model/Filter\"\nimport ListBinding from \"sap/ui/model/ListBinding\"\nimport ListItemBase from \"sap/m/ListItemBase\"\n\nconst RANGE_COLUMN_KEY = 'container-sample.p13n.app---Mountains--range'\n\n/**\n * @namespace sample.p13n.app.controller\n */\nexport default class MountainsController extends Controller {\n\n\tprivate engine: Engine\n\n\tpublic onInit(): void {\n\t\tthis.engine = Engine.getInstance()\n\t\tthis.initGridFilter()\n\t}\n\n\tprivate initGridFilter(): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tconst filterModel = gridList.getModel(\"filters\") as JSONModel\n\t\tconst gridListItems: GridListItem[] = gridList.getItems() as GridListItem[]\n\n\t\tconst filterMetadata: MetadataObject[] = gridListItems.map((gridListItem: GridListItem, index: number) => {\n\t\t\treturn {\n\t\t\t\tpath: \"\",\n\t\t\t\tkey: gridListItem.getId(),\n\t\t\t\tlabel: filterModel.getData().filters[index].label,\n\t\t\t}\n\t\t})\n\n\t\tconst filterHelper = new MetadataHelper(filterMetadata)\n\n\t\tthis.engine.register(gridList, {\n\t\t\thelper: filterHelper,\n\t\t\tcontroller: {\n\t\t\t\tItems: new SelectionController({\n\t\t\t\t\tcontrol: gridList,\n\t\t\t\t\ttargetAggregation: \"items\",\n\t\t\t\t\tgetKeyForItem: (gridListItem: GridListItem) => {\n\t\t\t\t\t\tconst listBinding = this.byId(\"table\").getBinding(\"items\") as ListBinding\n\t\t\t\t\t\treturn listBinding.getFilters(\"Control\").some((filter: Filter) => {\n\t\t\t\t\t\t\tconst expression: string[] = gridListItem.getBindingContext(\"filters\").getProperty(\"expression\")\n\t\t\t\t\t\t\treturn filter.getPath() === expression[0]\n\t\t\t\t\t\t\t\t&& filter.getValue1() === expression[2]\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tthis.engine.attachStateChange(this.onP13nStateChange.bind(this))\n\t}\n\n\tprivate onP13nStateChange(event: Event): void {\n\t\tconst parameters = event.getParameters() as {\n\t\t\tcontrol: Control,\n\t\t\tstate: MountainsControllerState\n\t\t}\n\t\tconst state: MountainsControllerState = parameters.state\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\n\t\tif (parameters.control === gridList) {\n\t\t\tgridList.getItems().forEach((gridListItem: GridListItem) => {\n\t\t\t\tgridListItem.setSelected(state.Items.some((selectionState: SelectionState) => {\n\t\t\t\t\treturn gridListItem.getId() === selectionState.key\n\t\t\t\t}))\n\t\t\t})\n\n\t\t\tconst filters: Filter[] = []\n\t\t\tlet filterText: string\n\t\t\tstate.Items.forEach((selectionState: SelectionState) => {\n\t\t\t\tconst item: GridListItem | undefined = Element.getElementById(selectionState.key) as GridListItem | undefined\n\t\t\t\tif (item) {\n\t\t\t\t\tconst filterContext = item.getBindingContext(\"filters\")\n\t\t\t\t\tconst expression: any[] = filterContext.getProperty(\"expression\")\n\t\t\t\t\tconst description: string = filterContext.getProperty(\"description\")\n\t\t\t\t\tfilters.push(new Filter(expression[0], expression[1], expression[2]))\n\t\t\t\t\tfilterText = filterText ? filterText + \", \" + description : description\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst table: P13nTable = this.byId(\"table\") as P13nTable\n\t\t\tconst tableBinding = table.getBinding(\"items\") as ListBinding\n\t\t\ttableBinding.filter(filters)\n\t\t\ttable.setFilterInfoText(filterText)\n\t\t}\n\t}\n\n\tpublic onGridFilterPress(event: Event): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tthis.engine.show(gridList, [\"Items\"], {\n\t\t\ttitle: \"Filter Selection\",\n\t\t\tsource: event.getSource()\n\t\t})\n\t}\n\n\tpublic onGridFilterSelect(event: Event): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tconst parameters = event.getParameters() as {\n\t\t\tlistItem : ListItemBase,\n\t\t\tlistItems : ListItemBase[],\n\t\t\tselected : boolean,\n\t\t\tselectAll: boolean\n\t\t}\n\t\tconst item = parameters.listItem as GridListItem\n\t\tthis.engine.retrieveState(gridList).then((state: MountainsControllerState) => {\n\t\t\tconst itemId = item.getId()\n\n\t\t\tconst oStateItem = state.Items.find((selectionState: SelectionState) => {\n\t\t\t\treturn selectionState.key == itemId\n\t\t\t})\n\n\t\t\tif (item.getSelected()) {\n\t\t\t\tstate.Items.push({key: itemId})\n\t\t\t} else {\n\t\t\t\toStateItem.visible = false\n\t\t\t}\n\n\t\t\tthis.engine.applyState(gridList, state)\n\t\t})\n\t}\n\n\tpublic onP13nPress(event: Event): void {\n\t\tconst p13nTable: P13nTable = this.byId(\"table\") as P13nTable\n\t\tp13nTable.openP13n(event)\n\t}\n\n\tpublic async onToggleRange(event: Event): Promise<void> {\n\t\tconst p13nTable: P13nTable = this.byId(\"table\") as P13nTable\n\t\tconst pressed = event.getSource<ToggleButton>().getPressed()\n\t\tconst state: P13nTableState = await p13nTable.retrieveState() as P13nTableState\n\t\tconst rangeColumnState = state.Columns.find((selectionState: SelectionState) => {\n\t\t\treturn selectionState.key == RANGE_COLUMN_KEY\n\t\t})\n\t\tif (pressed && rangeColumnState) {\n\t\t\trangeColumnState.visible = false\n\t\t\tMessageToast.show(\"Range hidden\")\n\t\t} else {\n\t\t\tstate.Columns.push({ key: RANGE_COLUMN_KEY, index: 0 })\n\t\t\tMessageToast.show(\"Range shown\")\n\t\t}\n\t\tp13nTable.applyState(state)\n\t}\n}\n\ninterface MountainsControllerState extends State {\n\tItems: SelectionState[]\n}"],"mappings":"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","ignoreList":[]}