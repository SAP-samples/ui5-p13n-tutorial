sap.ui.define(["sap/ui/core/mvc/Controller","sap/m/MessageToast","sap/m/p13n/Engine","sap/m/p13n/MetadataHelper","sap/m/p13n/SelectionController","sap/ui/core/Element","sap/ui/model/Filter"],function(e,t,n,s,i,o,r){"use strict";const l="container-sample.p13n.app---Mountains--range";const a=e.extend("sample.p13n.app.controller.MountainsController",{onInit:function e(){this.engine=n.getInstance();this.initGridFilter()},initGridFilter:function e(){const t=this.byId("gridFilter");const n=t.getModel("filters");const o=t.getItems();const r=o.map((e,t)=>({path:"",key:e.getId(),label:n.getData().filters[t].label}));const l=new s(r);this.engine.register(t,{helper:l,controller:{Items:new i({control:t,targetAggregation:"items",getKeyForItem:e=>{const t=this.byId("table").getBinding("items");return t.getFilters("Control").some(t=>{const n=e.getBindingContext("filters").getProperty("expression");return t.getPath()===n[0]&&t.getValue1()===n[2]})}})}});this.engine.attachStateChange(this.onP13nStateChange.bind(this))},onP13nStateChange:function e(t){const n=t.getParameters();const s=n.state;const i=this.byId("gridFilter");if(n.control===i){i.getItems().forEach(e=>{e.setSelected(s.Items.some(t=>e.getId()===t.key))});const e=[];let t;s.Items.forEach(n=>{const s=o.getElementById(n.key);if(s){const n=s.getBindingContext("filters");const i=n.getProperty("expression");const o=n.getProperty("description");e.push(new r(i[0],i[1],i[2]));t=t?t+", "+o:o}});const n=this.byId("table");const l=n.getBinding("items");l.filter(e);n.setFilterInfoText(t)}},onGridFilterPress:function e(t){const n=this.byId("gridFilter");this.engine.show(n,["Items"],{title:"Filter Selection",source:t.getSource()})},onGridFilterSelect:function e(t){const n=this.byId("gridFilter");const s=t.getParameters();const i=s.listItem;this.engine.retrieveState(n).then(e=>{const t=i.getId();const s=e.Items.find(e=>e.key==t);if(i.getSelected()){e.Items.push({key:t})}else{s.visible=false}this.engine.applyState(n,e)})},onP13nPress:function e(t){const n=this.byId("table");n.openP13n(t)},onToggleRange:async function e(n){const s=this.byId("table");const i=n.getSource().getPressed();const o=await s.retrieveState();const r=o.Columns.find(e=>e.key==l);if(i&&r){r.visible=false;t.show("Range hidden")}else{o.Columns.push({key:l,index:0});t.show("Range shown")}s.applyState(o)}});return a});
//# sourceMappingURL=Mountains.controller.js.map