{"version":3,"file":"Mountains.controller.js","names":["RANGE_COLUMN_KEY","MountainsController","Controller","extend","onInit","_onInit","this","engine","Engine","getInstance","initGridFilter","_initGridFilter","gridList","byId","filterModel","getModel","aFilterMetadata","getItems","map","gridListItem","index","path","key","getId","label","getData","filters","filterHelper","MetadataHelper","register","helper","controller","Items","SelectionController","control","targetAggregation","getKeyForItem","getSelected","attachStateChange","onP13nStateChange","bind","_onP13nStateChange","event","parameters","getParameters","state","forEach","setSelected","some","selectionState","onGridFilterPress","_onGridFilterPress","show","title","source","getSource","onP13nPress","_onP13nPress","p13nTable","openP13n","onToggleRange","async","_onToggleRange","pressed","getPressed","retrieveState","rangeColumnState","Columns","find","visible","MessageToast","push","applyState"],"sources":["Mountains.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\"\nimport Event from \"sap/ui/base/Event\"\nimport P13nTable, { P13nTableState } from \"../control/P13nTable\"\nimport ToggleButton from \"sap/m/ToggleButton\"\nimport MessageToast from \"sap/m/MessageToast\"\nimport SelectionController, { SelectionState } from \"sap/m/p13n/SelectionController\"\nimport Engine, { State } from \"sap/m/p13n/Engine\"\nimport GridList from \"sap/f/GridList\"\nimport MetadataHelper, { MetadataObject } from \"sap/m/p13n/MetadataHelper\"\nimport GridListItem from \"sap/f/GridListItem\"\nimport JSONModel from \"sap/ui/model/json/JSONModel\"\nimport Control from \"sap/ui/core/Control\"\n\nconst RANGE_COLUMN_KEY = 'range'\n\n/**\n * @namespace sample.p13n.app.controller\n */\nexport default class MountainsController extends Controller {\n\n\tprivate engine: Engine\n\n\tpublic onInit(): void {\n\t\tthis.engine = Engine.getInstance()\n\t\tthis.initGridFilter()\n\t}\n\n\tprivate initGridFilter(): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tconst filterModel = gridList.getModel(\"filters\") as JSONModel\n\n\t\tconst aFilterMetadata: MetadataObject[] = gridList.getItems().map((gridListItem, index: number) => {\n\t\t\treturn {\n\t\t\t\tpath: \"\",\n\t\t\t\tkey: gridListItem.getId(),\n\t\t\t\tlabel: filterModel.getData().filters[index].label\n\t\t\t}\n\t\t})\n\n\t\tconst filterHelper = new MetadataHelper(aFilterMetadata)\n\n\t\tthis.engine.register(gridList, {\n\t\t\thelper: filterHelper,\n\t\t\tcontroller: {\n\t\t\t\tItems: new SelectionController({\n\t\t\t\t\tcontrol: gridList,\n\t\t\t\t\ttargetAggregation: \"items\",\n\t\t\t\t\tgetKeyForItem: (gridListItem: GridListItem) => {\n\t\t\t\t\t\treturn gridListItem.getSelected()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tthis.engine.attachStateChange(this.onP13nStateChange.bind(this))\n\t}\n\n\tprivate onP13nStateChange(event: Event): void {\n\t\tconst parameters = event.getParameters() as {\n\t\t\tcontrol: Control,\n\t\t\tstate: MountainsControllerState\n\t\t}\n\t\tconst state: MountainsControllerState = parameters.state\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\n\t\tif (parameters.control === gridList) {\n\t\t\tgridList.getItems().forEach((gridListItem: GridListItem) => {\n\t\t\t\tgridListItem.setSelected(state.Items.some((selectionState: SelectionState) => {\n\t\t\t\t\treturn gridListItem.getId() === selectionState.key\n\t\t\t\t}))\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic onGridFilterPress(event: Event): void {\n\t\tconst gridList = this.byId(\"gridFilter\") as GridList\n\t\tthis.engine.show(gridList, [\"Items\"], {\n\t\t\ttitle: \"Filter Selection\",\n\t\t\tsource: event.getSource()\n\t\t})\n\t}\n\n\tpublic onP13nPress(event: Event): void {\n\t\tconst p13nTable: P13nTable = this.byId(\"table\") as P13nTable\n\t\tp13nTable.openP13n(event)\n\t}\n\n\tpublic async onToggleRange(event: Event): Promise<void> {\n\t\tconst p13nTable: P13nTable | undefined = this.byId(\"table\") as P13nTable | undefined\n\t\tconst pressed = (event.getSource() as ToggleButton).getPressed()\n\t\tconst state: P13nTableState = await p13nTable.retrieveState() as P13nTableState\n\t\tconst rangeColumnState = state.Columns.find((selectionState: SelectionState) => {\n\t\t\treturn selectionState.key == RANGE_COLUMN_KEY\n\t\t})\n\t\tif (pressed && rangeColumnState) {\n\t\t\trangeColumnState.visible = false\n\t\t\tMessageToast.show(\"Range hidden\")\n\t\t} else {\n\t\t\tstate.Columns.push({ key: RANGE_COLUMN_KEY, index: 0 })\n\t\t\tMessageToast.show(\"Range shown\")\n\t\t}\n\t\tp13nTable.applyState(state)\n\t}\n}\n\ninterface MountainsControllerState extends State {\n\tItems: SelectionState[]\n}"],"mappings":"iMAaA,MAAMA,EAAmB,QAEzB,MAGqBC,EAA4BC,EAAUC,OAAA,kDAInDC,OAAM,SAAAC,IACZC,KAAKC,OAASC,EAAOC,cACrBH,KAAKI,gBACN,EAEQA,eAAc,SAAAC,IACrB,MAAMC,EAAWN,KAAKO,KAAK,cAC3B,MAAMC,EAAcF,EAASG,SAAS,WAEtC,MAAMC,EAAoCJ,EAASK,WAAWC,IAAI,CAACC,EAAcC,KACzE,CACNC,KAAM,GACNC,IAAKH,EAAaI,QAClBC,MAAOV,EAAYW,UAAUC,QAAQN,GAAOI,SAI9C,MAAMG,EAAe,IAAIC,EAAeZ,GAExCV,KAAKC,OAAOsB,SAASjB,EAAU,CAC9BkB,OAAQH,EACRI,WAAY,CACXC,MAAO,IAAIC,EAAoB,CAC9BC,QAAStB,EACTuB,kBAAmB,QACnBC,cAAgBjB,GACRA,EAAakB,mBAMxB/B,KAAKC,OAAO+B,kBAAkBhC,KAAKiC,kBAAkBC,KAAKlC,MAC3D,EAEQiC,kBAAiB,SAAAE,EAACC,GACzB,MAAMC,EAAaD,EAAME,gBAIzB,MAAMC,EAAkCF,EAAWE,MACnD,MAAMjC,EAAWN,KAAKO,KAAK,cAE3B,GAAI8B,EAAWT,UAAYtB,EAAU,CACpCA,EAASK,WAAW6B,QAAS3B,IAC5BA,EAAa4B,YAAYF,EAAMb,MAAMgB,KAAMC,GACnC9B,EAAaI,UAAY0B,EAAe3B,KAC7C,EAEL,CACD,EAEO4B,kBAAiB,SAAAC,EAACT,GACxB,MAAM9B,EAAWN,KAAKO,KAAK,cAC3BP,KAAKC,OAAO6C,KAAKxC,EAAU,CAAC,SAAU,CACrCyC,MAAO,mBACPC,OAAQZ,EAAMa,aAEhB,EAEOC,YAAW,SAAAC,EAACf,GAClB,MAAMgB,EAAuBpD,KAAKO,KAAK,SACvC6C,EAAUC,SAASjB,EACpB,EAEakB,cAAaC,eAAAC,EAACpB,GAC1B,MAAMgB,EAAmCpD,KAAKO,KAAK,SACnD,MAAMkD,EAAWrB,EAAMa,YAA6BS,aACpD,MAAMnB,QAA8Ba,EAAUO,gBAC9C,MAAMC,EAAmBrB,EAAMsB,QAAQC,KAAMnB,GACrCA,EAAe3B,KAAOtB,GAE9B,GAAI+D,GAAWG,EAAkB,CAChCA,EAAiBG,QAAU,MAC3BC,EAAalB,KAAK,eACnB,KAAO,CACNP,EAAMsB,QAAQI,KAAK,CAAEjD,IAAKtB,EAAkBoB,MAAO,IACnDkD,EAAalB,KAAK,cACnB,CACAM,EAAUc,WAAW3B,EACtB,IAAC,OApFmB5C,CAAmB"}