{"version":3,"file":"P13nTable.js","names":["P13nTable","Table","extend","renderer","constructor","_constructor","id","settings","Table.prototype.constructor.call","this","engine","Engine","getInstance","initialized","Promise","resolve","attachEventOnce","initP13n","_initP13n","columns","getColumns","columnsMetadata","map","column","index","columnHeader","getHeader","columnListItem","getItems","innerControl","getCells","key","data","label","getText","path","getBinding","isA","getPath","helper","MetadataHelper","register","controller","Columns","SelectionController","control","targetAggregation","getKeyForItem","Sorter","SortController","Groups","GroupController","attachStateChange","event","parameters","getParameters","onStateChange","_onStateChange","state","forEach","setVisible","some","selectionState","moveColum","sorters","groupState","push","undefined","sortState","descending","listBinding","sort","_moveColum","find","oldIndex","indexOf","removeColumn","insertColumn","fnMoveCells","cell","removeCell","insertCell","itemsBindingInfo","getBindingInfo","template","item","openP13n","_openP13n","show","title","source","getSource"],"sources":["P13nTable.ts"],"sourcesContent":["import Table, { $TableSettings } from \"sap/m/Table\"\nimport Engine, { State } from \"sap/m/p13n/Engine\"\nimport SelectionController, { SelectionState } from \"sap/m/p13n/SelectionController\"\nimport MetadataHelper, { MetadataObject } from \"sap/m/p13n/MetadataHelper\"\nimport Column from \"sap/m/Column\"\nimport Text from \"sap/m/Text\"\nimport Event from \"sap/ui/base/Event\"\nimport Control from \"sap/ui/core/Control\"\nimport ColumnListItem from \"sap/m/ColumnListItem\"\nimport { AggregationBindingInfo } from \"sap/ui/base/ManagedObject\"\nimport SortController, { SortState } from \"sap/m/p13n/SortController\"\nimport GroupController, { GroupState } from \"sap/m/p13n/GroupController\"\nimport Sorter from \"sap/ui/model/Sorter\"\nimport ListBinding from \"sap/ui/model/ListBinding\"\n\n/**\n * @namespace sample.p13n.app.control\n */\nexport default class P13nTable extends Table {\n\tstatic renderer: string = \"sap/m/TableRenderer\"\n\n\tprivate initialized: Promise<void>\n\n\tprivate helper: MetadataHelper\n\n\tprivate engine: Engine\n\n\tconstructor(id?: string, settings?: $TableSettings) {\n\t\tsuper(id, settings)\n\t\tthis.engine = Engine.getInstance()\n\t\tthis.initialized = new Promise((resolve: () => void): void => {\n\t\t\tthis.attachEventOnce(\"updateFinished\", (): void => {\n\t\t\t\tthis.initP13n()\n\t\t\t\tresolve()\n\t\t\t}, this)\n\t\t})\n\t}\n\n\tprivate initP13n(): void {\n\t\tconst columns: Column[] = this.getColumns()\n\t\tconst columnsMetadata: MetadataObject[] = columns.map((column: Column, index: number) => {\n\t\t\tconst columnHeader = column.getHeader() as Text\n\t\t\tconst columnListItem: ColumnListItem = this.getItems()[0] as ColumnListItem\n\t\t\tconst innerControl = columnListItem.getCells()[index]\n\t\t\treturn {\n\t\t\t\tkey: column.data(\"p13nKey\"),\n\t\t\t\tlabel: columnHeader.getText(false),\n\t\t\t\tpath: innerControl.getBinding(innerControl.isA(\"sap.m.ObjectIdentifier\") ? \"title\" : \"text\").getPath()\n\t\t\t}\n\t\t})\n\n\t\tthis.helper = new MetadataHelper(columnsMetadata)\n\n\t\tthis.engine.register(this, {\n\t\t\thelper: this.helper,\n\t\t\tcontroller: {\n\t\t\t\tColumns: new SelectionController({\n\t\t\t\t\tcontrol: this,\n\t\t\t\t\ttargetAggregation: \"columns\",\n\t\t\t\t\tgetKeyForItem: (column: Column) => {\n\t\t\t\t\t\treturn column.data(\"p13nKey\")\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tSorter: new SortController({\n\t\t\t\t\tcontrol: this\n\t\t\t\t}),\n\t\t\t\tGroups: new GroupController({\n\t\t\t\t\tcontrol: this\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tthis.engine.attachStateChange((event: Event) => {\n\t\t\tconst parameters = event.getParameters() as any\n\t\t\tif (parameters[\"control\"] === this) {\n\t\t\t\tthis.onStateChange(parameters[\"state\"])\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic onStateChange(state: P13nTableState): void {\n\n\t\tthis.getColumns().forEach((column: Column) => {\n\t\t\t// if the column is not in the state, it is not visible\n\t\t\tcolumn.setVisible(state.Columns.some((selectionState: SelectionState) => {\n\t\t\t\treturn column.data(\"p13nKey\") === selectionState.key\n\t\t\t}))\n\t\t})\n\n\t\tstate.Columns.forEach(this.moveColum, this)\n\n\t\tconst sorters: Sorter[] = []\n\n\t\tstate.Groups.forEach((groupState: GroupState) => {\n\t\t\tsorters.push(new Sorter(this.helper.getPath(groupState.key), undefined, true))\n\t\t})\n\n\t\tstate.Sorter.forEach((sortState: SortState) => {\n\t\t\tsorters.push(new Sorter(this.helper.getPath(sortState.key), sortState.descending))\n\t\t})\n\n\t\tconst listBinding = this.getBinding(\"items\") as ListBinding\n\t\tlistBinding?.sort(sorters)\n\t}\n\n\tprivate moveColum(selectionState: SelectionState, index: number): void {\n\t\tconst column: Column | undefined = this.getColumns().find((column: Column) => {\n\t\t\treturn column.data(\"p13nKey\") === selectionState.key\n\t\t})\n\t\tif (column === undefined) return\n\t\tconst oldIndex: number = this.getColumns().indexOf(column)\n\n\t\tif (index != oldIndex) {\n\t\t\tthis.removeColumn(column)\n\t\t\tthis.insertColumn(column, index)\n\n\t\t\tconst fnMoveCells = (columnListItem: ColumnListItem | undefined) => {\n\t\t\t\tif (columnListItem?.isA(\"sap.m.ColumnListItem\")) {\n\t\t\t\t\tconst cell: Control | null = columnListItem.removeCell(oldIndex)\n\t\t\t\t\tif (cell != null) columnListItem.insertCell(cell, index)\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst itemsBindingInfo: AggregationBindingInfo = this.getBindingInfo(\"items\") as AggregationBindingInfo\n\t\t\tfnMoveCells(itemsBindingInfo.template as ColumnListItem | undefined)\n\t\t\tthis.getItems().forEach((item) => fnMoveCells(item as ColumnListItem))\n\t\t}\n\t}\n\n\tpublic openP13n(event: Event): void {\n\t\tthis.engine.show(this, [\"Columns\", \"Sorter\", \"Groups\"], {\n\t\t\ttitle: \"Table Settings\",\n\t\t\tsource: event.getSource<Control>()\n\t\t})\n\t}\n\n}\n\nexport interface P13nTableState extends State {\n\tColumns: SelectionState[],\n\tSorter: SortState[],\n\tGroups: GroupState[]\n}"],"mappings":"gPAeA,MAGqBA,EAAkBC,EAAKC,OAAA,qCACpCC,SAAmB,sBAQ1BC,YAAW,SAAAC,EAACC,EAAaC,GACxBC,6BAAAC,KAAMH,EAAIC,GACVE,KAAKC,OAASC,EAAOC,cACrBH,KAAKI,YAAc,IAAIC,QAASC,IAC/BN,KAAKO,gBAAgB,iBAAkB,KACtCP,KAAKQ,WACLF,GAAS,EACPN,KAAK,EAEV,EAEQQ,SAAQ,SAAAC,IACf,MAAMC,EAAoBV,KAAKW,aAC/B,MAAMC,EAAoCF,EAAQG,IAAI,CAACC,EAAgBC,KACtE,MAAMC,EAAeF,EAAOG,YAC5B,MAAMC,EAAiClB,KAAKmB,WAAW,GACvD,MAAMC,EAAeF,EAAeG,WAAWN,GAC/C,MAAO,CACNO,IAAKR,EAAOS,KAAK,WACjBC,MAAOR,EAAaS,QAAQ,OAC5BC,KAAMN,EAAaO,WAAWP,EAAaQ,IAAI,0BAA4B,QAAU,QAAQC,UAC7F,GAGF7B,KAAK8B,OAAS,IAAIC,EAAenB,GAEjCZ,KAAKC,OAAO+B,SAAShC,KAAM,CAC1B8B,OAAQ9B,KAAK8B,OACbG,WAAY,CACXC,QAAS,IAAIC,EAAoB,CAChCC,QAASpC,KACTqC,kBAAmB,UACnBC,cAAgBxB,GACRA,EAAOS,KAAK,aAGrBgB,OAAQ,IAAIC,EAAe,CAC1BJ,QAASpC,OAEVyC,OAAQ,IAAIC,EAAgB,CAC3BN,QAASpC,UAKZA,KAAKC,OAAO0C,kBAAmBC,IAC9B,MAAMC,EAAaD,EAAME,gBACzB,GAAID,EAAW,aAAe7C,KAAM,CACnCA,KAAK+C,cAAcF,EAAW,SAC/B,GAEF,EAEOE,cAAa,SAAAC,EAACC,GAEpBjD,KAAKW,aAAauC,QAASpC,IAE1BA,EAAOqC,WAAWF,EAAMf,QAAQkB,KAAMC,GAC9BvC,EAAOS,KAAK,aAAe8B,EAAe/B,KAC/C,GAGJ2B,EAAMf,QAAQgB,QAAQlD,KAAKsD,UAAWtD,MAEtC,MAAMuD,EAAoB,GAE1BN,EAAMR,OAAOS,QAASM,IACrBD,EAAQE,KAAK,IAAIlB,EAAOvC,KAAK8B,OAAOD,QAAQ2B,EAAWlC,KAAMoC,UAAW,MAAM,GAG/ET,EAAMV,OAAOW,QAASS,IACrBJ,EAAQE,KAAK,IAAIlB,EAAOvC,KAAK8B,OAAOD,QAAQ8B,EAAUrC,KAAMqC,EAAUC,YAAY,GAGnF,MAAMC,EAAc7D,KAAK2B,WAAW,SACpCkC,GAAaC,KAAKP,EACnB,EAEQD,UAAS,SAAAS,EAACV,EAAgCtC,GACjD,MAAMD,EAA6Bd,KAAKW,aAAaqD,KAAMlD,GACnDA,EAAOS,KAAK,aAAe8B,EAAe/B,KAElD,GAAIR,IAAW4C,UAAW,OAC1B,MAAMO,EAAmBjE,KAAKW,aAAauD,QAAQpD,GAEnD,GAAIC,GAASkD,EAAU,CACtBjE,KAAKmE,aAAarD,GAClBd,KAAKoE,aAAatD,EAAQC,GAE1B,MAAMsD,EAAenD,IACpB,GAAIA,GAAgBU,IAAI,wBAAyB,CAChD,MAAM0C,EAAuBpD,EAAeqD,WAAWN,GACvD,GAAIK,GAAQ,KAAMpD,EAAesD,WAAWF,EAAMvD,EACnD,GAED,MAAM0D,EAA2CzE,KAAK0E,eAAe,SACrEL,EAAYI,EAAiBE,UAC7B3E,KAAKmB,WAAW+B,QAAS0B,GAASP,EAAYO,GAC/C,CACD,EAEOC,SAAQ,SAAAC,EAAClC,GACf5C,KAAKC,OAAO8E,KAAK/E,KAAM,CAAC,UAAW,SAAU,UAAW,CACvDgF,MAAO,iBACPC,OAAQrC,EAAMsC,aAEhB,IAAC,OAnHmB3F,CAAS"}